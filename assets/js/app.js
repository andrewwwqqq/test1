/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/assets/js/app.js":
/*!******************************!*\
  !*** ./src/assets/js/app.js ***!
  \******************************/
/***/ (function() {

eval("// accordion\r\ndocument.querySelectorAll('.accordion__item').forEach(item => {\r\n\tconst title = item.getElementsByTagName('h6')[0]\r\n\tconst button = item.getElementsByTagName('button')[0]\r\n\r\n\ttitle.addEventListener('click', () => {\r\n\t\tconst content = item.querySelector('.accordion__content')\r\n\r\n\t\tif (item.classList.contains('accordion__item--visible')) {\r\n\t\t\t// Закрытие элемента\r\n\t\t\titem.classList.remove('accordion__item--visible')\r\n\t\t\tcontent.style.height = 0\r\n\t\t\t// toggleButton.textContent = '+' // Меняем знак на \"+\"\r\n\t\t} else {\r\n\t\t\t// Закрываем все открытые элементы\r\n\t\t\tdocument.querySelectorAll('.accordion__item').forEach(i => {\r\n\t\t\t\ti.classList.remove('accordion__item--visible')\r\n\t\t\t\ti.querySelector('.accordion__content').style.height = 0\r\n\t\t\t\t// i.querySelector('.accordion__toggle-button').textContent = '+' // Меняем знак на \"+\"\r\n\t\t\t})\r\n\r\n\t\t\t// Открытие текущего элемента\r\n\t\t\titem.classList.add('accordion__item--visible')\r\n\t\t\tcontent.style.height = content.scrollHeight + 'px'\r\n\t\t\t// toggleButton.textContent = '-' // Меняем знак на \"-\"\r\n\t\t}\r\n\t})\r\n\r\n\tbutton.addEventListener('click', () => {\r\n\t\tconst content = item.querySelector('.accordion__content')\r\n\r\n\t\tif (item.classList.contains('accordion__item--visible')) {\r\n\t\t\t// Закрытие элемента\r\n\t\t\titem.classList.remove('accordion__item--visible')\r\n\t\t\tcontent.style.height = 0\r\n\t\t\t// toggleButton.textContent = '+' // Меняем знак на \"+\"\r\n\t\t} else {\r\n\t\t\t// Закрываем все открытые элементы\r\n\t\t\tdocument.querySelectorAll('.accordion__item').forEach(i => {\r\n\t\t\t\ti.classList.remove('accordion__item--visible')\r\n\t\t\t\ti.querySelector('.accordion__content').style.height = 0\r\n\t\t\t\t// i.querySelector('.accordion__toggle-button').textContent = '+' // Меняем знак на \"+\"\r\n\t\t\t})\r\n\r\n\t\t\t// Открытие текущего элемента\r\n\t\t\titem.classList.add('accordion__item--visible')\r\n\t\t\tcontent.style.height = content.scrollHeight + 'px'\r\n\t\t\t// toggleButton.textContent = '-' // Меняем знак на \"-\"\r\n\t\t}\r\n\t})\r\n})\r\n\r\n// blur created toggle\r\nconst createdColumnDescribe = document.querySelector(\r\n\t'.created__column-describe'\r\n)\r\nconst createdColumnBlur = document.querySelector('.created__column-blur')\r\nconst createdColumnButton = document.querySelector('.created__column-button')\r\n\r\ncreatedColumnButton.addEventListener('click', () => {\r\n\tif (\r\n\t\t!createdColumnBlur.classList.contains('blur--hidden') &&\r\n\t\t!createdColumnDescribe.classList.contains(\r\n\t\t\t'created__column-describe--visible'\r\n\t\t)\r\n\t) {\r\n\t\tcreatedColumnBlur.classList.add('blur--hidden')\r\n\t\tcreatedColumnDescribe.classList.add('created__column-describe--visible')\r\n\t\tcreatedColumnButton.textContent = 'Hide all text'\r\n\t} else {\r\n\t\tcreatedColumnBlur.classList.remove('blur--hidden')\r\n\t\tcreatedColumnDescribe.classList.remove('created__column-describe--visible')\r\n\t\tcreatedColumnButton.textContent = 'Show More Text'\r\n\t}\r\n})\r\n\r\n// swiper\r\nvar startThumbnailSlider = new Swiper('.start__swiper-thumbnail', {\r\n\tloop: true,\r\n\tspaceBetween: 10,\r\n\tslidesPerView: 6,\r\n\tfreeMode: true,\r\n\r\n\tbreakpoints: {\r\n\t\t0: {\r\n\t\t\tdirection: 'horizontal',\r\n\t\t},\r\n\t\t576: {\r\n\t\t\tdirection: 'vertical',\r\n\t\t},\r\n\t\t1025: {\r\n\t\t\tdirection: 'horizontal',\r\n\t\t},\r\n\t},\r\n})\r\n\r\nvar startMainSlider = new Swiper('.start__swiper-main', {\r\n\teffect: 'fade', // Эффект затухания\r\n\tfadeEffect: {\r\n\t\tcrossFade: true, // Плавное затухание\r\n\t},\r\n\tloop: true,\r\n\tspaceBetween: 10,\r\n\tthumbs: {\r\n\t\tswiper: startThumbnailSlider,\r\n\t},\r\n})\r\n\r\n// fancy box\r\nFancybox.bind('[data-fancybox=\"gallery\"]', {\r\n\tThumbs: false, // Если миниатюры не нужны\r\n\tToolbar: {\r\n\t\tdisplay: ['close'], // Настройка тулбара\r\n\t},\r\n})\r\n\r\n//  Masonry\r\nconst masonry = new Masonry('.reviews__row', {\r\n\titemSelector: '.reviews__column',\r\n\tcolumnWidth: '.reviews__column',\r\n\tpercentPosition: true,\r\n\tgutter: 16, // Расстояние между элементами\r\n})\r\n\r\n// burger\r\nconst burger = document.querySelector('.burger')\r\nconst burgerButton = document.querySelector('.burger__button')\r\nconst burgerMenu = document.querySelector('.burger-menu')\r\nconst burgerTransitionTime = 700\r\n\r\nburger.addEventListener('click', () => {\r\n\tif (burgerButton.classList.contains('burger__button--open')) {\r\n\t\tdocument.body.classList.add('overflow-hidden')\r\n\t\tburgerMenu.classList.add('z2')\r\n\t\tburgerMenu.classList.remove('z-1')\r\n\t\tburgerMenu.classList.add('burger-menu--open')\r\n\t\tburgerButton.classList.remove('burger__button--open')\r\n\t\tburgerButton.classList.add('burger__button--close')\r\n\t} else {\r\n\t\tburgerMenu.classList.remove('burger-menu--open')\r\n\t\tburgerButton.classList.add('burger__button--open')\r\n\t\tburgerButton.classList.remove('burger__button--close')\r\n\t\tdocument.body.classList.remove('overflow-hidden')\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tburgerMenu.classList.remove('z2')\r\n\t\t\tburgerMenu.classList.add('z-1')\r\n\t\t}, burgerTransitionTime)\r\n\t}\r\n})\r\n\r\nconst burgerMenuLinks = document.querySelectorAll('.burger-menu__link')\r\n\r\nburgerMenuLinks.forEach(link => {\r\n\tlink.addEventListener('click', () => {\r\n\t\tburgerMenu.classList.remove('burger-menu--open')\r\n\t\tburgerButton.classList.add('burger__button--open')\r\n\t\tburgerButton.classList.remove('burger__button--close')\r\n\t\tdocument.body.classList.remove('overflow-hidden')\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tburgerMenu.classList.remove('z2')\r\n\t\t\tburgerMenu.classList.add('z-1')\r\n\t\t}, burgerTransitionTime)\r\n\t})\r\n})\r\n\r\n// start popup\r\nconst startBuyOpenButton = document.querySelector('.start__buy-button')\r\nconst startBuyCloseButton = document.querySelector('.popup-start__close')\r\nconst startPopup = document.querySelector('.popup-start')\r\nconst startPopupBg = document.querySelector('.popup-start__bg')\r\nconst startTransitionTime = 700\r\n\r\nstartBuyOpenButton.addEventListener('click', () => {\r\n\tdocument.body.classList.add('overflow-hidden')\r\n\tstartPopup.classList.add('z2')\r\n\tstartPopup.classList.remove('z-1')\r\n\tstartPopup.classList.add('popup-start--open')\r\n})\r\n\r\nstartBuyCloseButton.addEventListener('click', () => {\r\n\tstartPopup.classList.remove('popup-start--open')\r\n\tdocument.body.classList.remove('overflow-hidden')\r\n\r\n\tsetTimeout(() => {\r\n\t\tstartPopup.classList.remove('z2')\r\n\t\tstartPopup.classList.add('z-1')\r\n\t}, startTransitionTime)\r\n})\r\n\r\nstartPopupBg.addEventListener('click', () => {\r\n\tstartPopup.classList.remove('popup-start--open')\r\n\tdocument.body.classList.remove('overflow-hidden')\r\n\r\n\tsetTimeout(() => {\r\n\t\tstartPopup.classList.remove('z2')\r\n\t\tstartPopup.classList.add('z-1')\r\n\t}, startTransitionTime)\r\n})\r\n\r\n// blur reviews toggle\r\nconst reviewsRow = document.querySelector('.reviews__row')\r\nconst reviewsBlur = document.querySelector('.reviews__blur')\r\nconst reviewsButton = document.querySelector('.reviews__button')\r\n\r\nreviewsButton.addEventListener('click', () => {\r\n\tif (\r\n\t\t!reviewsBlur.classList.contains('blur--hidden') &&\r\n\t\t!reviewsRow.classList.contains('reviews__row--visible')\r\n\t) {\r\n\t\treviewsBlur.classList.add('blur--hidden')\r\n\t\treviewsRow.classList.add('reviews__row--visible')\r\n\t\treviewsButton.textContent = 'Hide Reviews'\r\n\t} else {\r\n\t\treviewsBlur.classList.remove('blur--hidden')\r\n\t\treviewsRow.classList.remove('reviews__row--visible')\r\n\t\treviewsButton.textContent = 'show all reviews'\r\n\t}\r\n})\r\n\r\nconst introSwiper = new Swiper('.intro__swiper', {\r\n\tslidesPerView: 1.2, // Количество слайдов на экране\r\n\tspaceBetween: 16, // Расстояние между слайдами\r\n\tcenteredSlides: true, // Центральный слайд будет по центру\r\n\tloop: true, // Цикличная прокрутка\r\n\r\n\tbreakpoints: {\r\n\t\t1024: {\r\n\t\t\tslidesPerView: 2.5,\r\n\t\t},\r\n\r\n\t\t1440: {\r\n\t\t\tslidesPerView: 4.2,\r\n\t\t},\r\n\t},\r\n\r\n\tautoplay: {\r\n\t\tdelay: 3000, // Автоперелистивание каждые 5 секунд\r\n\t\tpauseOnMouseEnter: true,\r\n\t\tdisableOnInteraction: true,\r\n\t},\r\n})\r\n\r\nconst easySwiper = new Swiper('.easy__swiper', {\r\n\tslidesPerView: 1.2, // Количество слайдов на экране\r\n\tspaceBetween: 24, // Расстояние между слайдами\r\n\tcenteredSlides: true, // Центральный слайд будет по центру\r\n\tloop: true, // Цикличная прокрутка\r\n\r\n\tnavigation: {\r\n\t\tnextEl: '.easy__swiper-button-prev',\r\n\t\tprevEl: '.easy__swiper-button-next',\r\n\t},\r\n\r\n\tbreakpoints: {\r\n\t\t1024: {\r\n\t\t\tslidesPerView: 2.5,\r\n\t\t},\r\n\r\n\t\t1440: {\r\n\t\t\tslidesPerView: 4.2,\r\n\t\t},\r\n\t},\r\n})\r\n\r\nconst becomeSwiper = new Swiper('.become__swiper', {\r\n\tslidesPerView: 1.2, // Количество слайдов на экране\r\n\tspaceBetween: 16, // Расстояние между слайдами\r\n\tcenteredSlides: true, // Центральный слайд будет по центру\r\n\tloop: true, // Цикличная прокрутка\r\n\r\n\tnavigation: {\r\n\t\tnextEl: '.become__swiper-button-prev',\r\n\t\tprevEl: '.become__swiper-button-next',\r\n\t},\r\n\r\n\tbreakpoints: {\r\n\t\t1024: {\r\n\t\t\tslidesPerView: 2.5,\r\n\t\t},\r\n\r\n\t\t1440: {\r\n\t\t\tslidesPerView: 4.2,\r\n\t\t},\r\n\t},\r\n})\r\n\r\nconst bodySwiper = new Swiper('.body__swiper', {\r\n\tslidesPerView: 1.2, // Количество слайдов на экране\r\n\tspaceBetween: 16, // Расстояние между слайдами\r\n\tcenteredSlides: true, // Центральный слайд будет по центру\r\n\tloop: true, // Цикличная прокрутка\r\n\r\n\tnavigation: {\r\n\t\tnextEl: '.body__swiper-button-prev',\r\n\t\tprevEl: '.body__swiper-button-next',\r\n\t},\r\n\r\n\tbreakpoints: {\r\n\t\t1024: {\r\n\t\t\tslidesPerView: 2.5,\r\n\t\t},\r\n\r\n\t\t1440: {\r\n\t\t\tslidesPerView: 4.2,\r\n\t\t},\r\n\t},\r\n})\r\n\r\n// filter on Click\r\n\r\n// Подключите библиотеку Isotope\r\nconst grid = document.querySelector('.grid')\r\nconst iso = new Isotope(grid, {\r\n\titemSelector: '.element-item',\r\n})\r\n\r\n// Добавьте обработчики фильтров\r\ndocument.querySelectorAll('.filters button').forEach(button => {\r\n\tbutton.addEventListener('click', () => {\r\n\t\tconst filterValue = button.getAttribute('data-filter')\r\n\t\tiso.arrange({ filter: filterValue })\r\n\t})\r\n})\r\n\r\nconst reviewsFilters = document.querySelectorAll('.reviews__filter')\r\n\r\nconst reviewFilterClickHandler = newActiveFilter => {\r\n\treviewsFilters.forEach(reviewsFilter => {\r\n\t\treviewsFilter.classList.remove('reviews__filter--active')\r\n\t})\r\n\r\n\tnewActiveFilter.classList.add('reviews__filter--active')\r\n}\r\n\r\nreviewsFilters.forEach(reviewsFilter => {\r\n\treviewsFilter.addEventListener('click', () => {\r\n\t\treviewFilterClickHandler(reviewsFilter)\r\n\t})\r\n})\r\n\r\n// footer input validation\r\n\r\nconst footerEmailInput = document.querySelector('.footer__top-column-input')\r\nconst footerForm = document.querySelector('.footer__top-column-form')\r\nconst footerButton = document.querySelector('.footer__top-column-button')\r\n\r\n// Функция проверки email\r\nfunction isValidEmail(email) {\r\n\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ // Регулярное выражение для проверки email\r\n\treturn emailRegex.test(email)\r\n}\r\n\r\n// Добавляем событие при отправке формы\r\nfooterForm.addEventListener('submit', event => {\r\n\tconst emailValue = footerEmailInput.value.trim() // Убираем пробелы в начале и конце\r\n\r\n\t// Проверка email\r\n\tif (!isValidEmail(emailValue)) {\r\n\t\tfooterEmailInput.style.borderColor = 'red'\r\n\t\talert('Пожалуйста, введите корректный email.')\r\n\t\tevent.preventDefault() // Останавливаем отправку формы\r\n\t} else {\r\n\t\talert('Email успешно отправлен!')\r\n\t\t// Здесь можно отправить форму через AJAX, если требуется\r\n\t}\r\n})\r\n\r\n// Убираем стиль ошибки при изменении значения\r\nfooterEmailInput.addEventListener('input', () => {\r\n\tfooterEmailInput.style.borderColor = ''\r\n})\r\n\n\n//# sourceURL=webpack://webdream/./src/assets/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/assets/js/app.js"]();
/******/ 	
/******/ })()
;